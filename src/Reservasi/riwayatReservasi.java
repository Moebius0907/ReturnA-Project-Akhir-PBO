/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Reservasi;

import javax.swing.JOptionPane;
import javax.swing.table.TableColumnModel;
import database.MyJDBC;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JFileChooser;

/**
 *
 * @author lala_
 */
public class riwayatReservasi extends javax.swing.JPanel {

   
    
    public riwayatReservasi() {
        initComponents();
        // Atur model tabel agar tidak dapat diedit
        tabelReservasi.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][] {}, // Data awal kosong
                new String[] { // Header kolom
                    "ID Reservasi", "Nama", "Jenis Layanan", "Nama Layanan", 
                    "Tanggal Reservasi", "Jam Reservasi", "Nama Pegawai", "Harga", "Status"
                })
        {
            @Override
            public boolean isCellEditable(int row, int column) {
            return false; // tabel tidak dapat diedit
            }
        });
        
        MyJDBC.loadRiwayatReservasiByIdPelanggan(tabelReservasi);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelReservasi = new JTableCustom.jtable_custom();
        batalBT = new javax.swing.JButton();
        cetakBT = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(1139, 661));
        setLayout(new java.awt.CardLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(1139, 661));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(149, 73, 73));
        jLabel2.setText("Riwayat Reservasi");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 30, -1, -1));

        tabelReservasi.setBackground(new java.awt.Color(255, 204, 204));
        tabelReservasi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Reservasi", "Nama", "Jenis Layanan", "Nama Layanan", "Tanggal Reservasi", "Jam Reservasi", "Nama Pegawai", " Harga", "Status"
            }
        ));
        tabelReservasi.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        tabelReservasi.setGridColor(new java.awt.Color(255, 255, 255));
        tabelReservasi.setRowHeight(35);
        tabelReservasi.setRowMargin(1);
        tabelReservasi.setSelectionBackground(new java.awt.Color(153, 102, 0));
        tabelReservasi.setShowGrid(true);
        jScrollPane2.setViewportView(tabelReservasi);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 100, 910, 440));

        batalBT.setText("Batal");
        batalBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                batalBTActionPerformed(evt);
            }
        });
        jPanel1.add(batalBT, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 570, 90, 40));

        cetakBT.setText("Cetak");
        cetakBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cetakBTActionPerformed(evt);
            }
        });
        jPanel1.add(cetakBT, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 570, 90, 40));

        add(jPanel1, "card2");
    }// </editor-fold>//GEN-END:initComponents

    private void batalBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_batalBTActionPerformed
         // Memastikan ada baris yang dipilih dalam tabel
         int selectedRow = tabelReservasi.getSelectedRow();
         
         //jika tidak ada baris yang dipilih
         if (selectedRow == -1) {
             JOptionPane.showMessageDialog(null, "Pilih reservasi yang ingin dibatalkan.", "Peringatan", JOptionPane.WARNING_MESSAGE);
             return;
         }
         
         try {
            // Ambil nilai dari kolom pertama tabel dan statusnya
            Object idReservasiObj = tabelReservasi.getValueAt(selectedRow, 0);
            String status = (String) tabelReservasi.getValueAt(selectedRow, 8); 

            //Memeriksa apakah status reservasi "Ditolak" atau "Diterima". jika iya tidak bisa dibatalkan
            if ("Ditolak".equalsIgnoreCase(status)) {
                JOptionPane.showMessageDialog(null, "Reservasi dengan status 'Ditolak' tidak dapat dibatalkan.", "Peringatan", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            if ("Diterima".equalsIgnoreCase(status)) {
                JOptionPane.showMessageDialog(null, "Reservasi dengan status 'Diterima' tidak dapat dibatalkan.", "Peringatan", JOptionPane.WARNING_MESSAGE);
                return;
            }

            int idReservasi;
            //Memeriksa id reservasi
            if (idReservasiObj instanceof Integer) {
                idReservasi = (Integer) idReservasiObj;
            } else if (idReservasiObj instanceof String) {
                idReservasi = Integer.parseInt((String) idReservasiObj);
            } else {
                JOptionPane.showMessageDialog(null, "ID reservasi tidak valid.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Konfirmasi pembatalan
            int confirm = JOptionPane.showConfirmDialog(null, "Apakah Anda yakin ingin membatalkan reservasi ini?", "Konfirmasi", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
            // Memanggil metode updateStatusReservasi dari MyJDBC
            boolean isUpdated = MyJDBC.updateStatusReservasi(idReservasi, "Dibatalkan");
            if (isUpdated) {
                JOptionPane.showMessageDialog(null, "Reservasi berhasil dibatalkan.", "Sukses", JOptionPane.INFORMATION_MESSAGE);
                // Refresh tabel untuk memperbarui tampilan data
                MyJDBC.loadRiwayatReservasiByIdPelanggan(tabelReservasi);
            } else {
                JOptionPane.showMessageDialog(null, "Gagal membatalkan reservasi.", "Error", JOptionPane.ERROR_MESSAGE);}
            }
         } catch (NumberFormatException e) {
             JOptionPane.showMessageDialog(null, "ID reservasi tidak valid.", "Error", JOptionPane.ERROR_MESSAGE);
         }
    }//GEN-LAST:event_batalBTActionPerformed

    
    private void cetakBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cetakBTActionPerformed
                                               
        try {
        // Ambil baris yang dipilih dari tabel
        int[] selectedRows = tabelReservasi.getSelectedRows();

        // Jika tidak ada baris yang dipilih
        if (selectedRows.length == 0) {
            JOptionPane.showMessageDialog(this, "Silakan pilih baris terlebih dahulu.", "Informasi", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        // Memeriksa apakah semua baris yang dipilih memiliki status bukan "Diterima"
        boolean adaDiterima = false;
        for (int i : selectedRows) {
            String status = tabelReservasi.getValueAt(i, tabelReservasi.getColumnCount() - 1).toString(); // Ambil kolom terakhir (Status)
            if ("Diterima".equalsIgnoreCase(status)) { // Jika ada status "Diterima"
                adaDiterima = true;
                break;
            }
        }

        // Jika tidak ada status "Diterima" pada baris yang dipilih
        if (!adaDiterima) {
            JOptionPane.showMessageDialog(this, "Tidak dapat mencetak. Pilih data dengan status 'Diterima'.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Jika ada data valid
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Simpan Struk Reservasi");
        fileChooser.setSelectedFile(new File("StrukReservasi.txt"));

        int userSelection = fileChooser.showSaveDialog(this);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();

            try (BufferedWriter writer = new BufferedWriter(new FileWriter(fileToSave))) {
                // Tulis data hanya untuk baris yang dipilih dan status "Diterima"
                for (int i : selectedRows) {
                    String status = tabelReservasi.getValueAt(i, tabelReservasi.getColumnCount() - 1).toString(); // Ambil kolom terakhir (Status)
                    if ("Diterima".equalsIgnoreCase(status)) {
                        writer.write("======================================");
                        writer.newLine();
                        writer.write(" STRUK RESERVASI RESTAR HAIR SALON ");
                        writer.newLine();
                        writer.write("======================================");
                        writer.newLine();
                        writer.write("ID Reservasi: " + tabelReservasi.getValueAt(i, 0));
                        writer.newLine();
                        writer.write("Nama: " + tabelReservasi.getValueAt(i, 1));
                        writer.newLine();
                        writer.write("Jenis Layanan: " + tabelReservasi.getValueAt(i, 2));
                        writer.newLine();
                        writer.write("Nama Layanan: " + tabelReservasi.getValueAt(i, 3));
                        writer.newLine();
                        writer.write("Tanggal: " + tabelReservasi.getValueAt(i, 4));
                        writer.newLine();
                        writer.write("Jam: " + tabelReservasi.getValueAt(i, 5));
                        writer.newLine();
                        writer.write("Nama Pegawai: " + tabelReservasi.getValueAt(i, 6));
                        writer.newLine();
                        writer.write("Harga: " + tabelReservasi.getValueAt(i, 7));
                        writer.newLine();
                        writer.write("Status: " + tabelReservasi.getValueAt(i, tabelReservasi.getColumnCount() - 1));
                        writer.newLine();
                        writer.write("======================================");
                        writer.newLine();
                        writer.newLine();
                    }
                }

                JOptionPane.showMessageDialog(this, "Struk reservasi berhasil disimpan ke file: " + fileToSave.getAbsolutePath(), "Sukses", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat menyimpan file.\n" + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Gagal mencetak struk reservasi.\n" + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_cetakBTActionPerformed
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton batalBT;
    private javax.swing.JButton cetakBT;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private JTableCustom.jtable_custom tabelReservasi;
    // End of variables declaration//GEN-END:variables

}
